<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<!-- default platform documentation stylesheets -->
<style>@import url("book.css");</style>
<!-- default schema documentation stylesheets -->
<style>@import url("schema.css");</style>
</HEAD>
<BODY>
<h1>Controllo dei criteri di aggiornamento di Eclipse</h1>

<p>La funzione di aggiornamento di Eclipse consente agli utenti di cercare gli aggiornamenti per
le correntemente funzioni installate. Per ciascuna funzione, l'aggiornamento utilizza l'URL incluso
per collegarsi al server remoto e cercare nuove versioni. Se sono disponibili degli aggiornamenti,
Eclipse consente agli utenti di iniziare la procedura di installazione. Dopo aver scaricato,
installato e riavviato la piattaforma, la nuova versione della funzione è pronta per essere utilizzata.</p>
<p>Nelle aziende con molti utenti che utilizzano lo stesso prodotto basato su Eclipse (di solito uno di
quelli commerciali), possono verificarsi alcuni problemi con questo procedimento:</p>
<ol>
  <li>Gli aggiornamenti di prodotti molto grandi (ad esempio con più di 500 plugin) sono loro stessi molto grossi. 
  Ai team di supporto I/T potrebbe non piacere l'idea di centinaia di sviluppatori che scaricano individualmente
  aggiornamenti da 500 MEG sui loro singoli computer. Oltre all'impatto sulle prestazioni, una richiesta
  di download di tale portata potrebbe non riuscire, conducendo a ripetuti tentativi
  e a perdite di tempo per gli sviluppatori.</li>
  <li>Alcune aziende esplicitamente non desiderano che gli sviluppatori scarichino gli
  aggiornamenti direttamente da Internet. Ad esempio, possono disporre di un team di supporto locale
  che non sarebbe in grado di gestire le richieste di versione del prodotto già
  disponibili presso il sito di aggiornamenti del fornitore. Potrebbero voler limitare gli aggiornamenti
  e le fix ad un elenco interno approvato. Idealmente, basterebbe impostare i siti di aggiornamento
  'proxy' sulla LAN (dietro il firewall).</li>
  <li>Una volta impostati gli aggiornamenti nei siti proxy, gli amministratori devono in qualche modo informare gli
  utenti che gli aggiornamenti sono disponibili.</li>
</ol>
<h2>2. Criteri di aggiornamento</h2>

<h3>2.1 Supporto per la creazione di siti di aggiornamento locali (proxy)</h3>
<p>Il primo passo per un amministratore di prodotti è di configurare un sito locale di aggiornamento di Eclipse
su un server collegato alla LAN aziendale (dietro il firewall).
Il sito di aggiornamento rappresenterebbe un sottoinsieme del sito di aggiornamenti del prodotto su Internet
perché conterrebbe solo le funzioni ed i plugin relativi agli aggiornamenti che l'azienda desidera applicare
al momento. Tecnicamente il sito sarebbe un normale sito di aggiornamento
Eclipse con site.xml, funzioni ed archivi di plugin.</p>
<p>Gli amministratori possono costruire il sito in due modi:</p>
<ol>
  <li>I team di supporto del prodotto creano un file zip del sito di aggiornamenti pronto
  a questo scopo specifico. Gli amministratori devono semplicemente scaricarlo dalla pagina web
  di supporto del prodotto con uno strumento di loro scelta e decomprimerlo sul server locale.
  Questo approccio è utile per file zip molto grandi che richiedono gestori di download
  moderni riavviabili (di quelli che in caso di problemi con la connessione, riprendono da dove
  erano stati interrotti).</li>
  <li>L'aggiornamento di Elipse fornisce uno strumento per effettuare il mirroring completo dei siti di aggiornamento
  remoti o consente agli amministratori di selezionare gli aggiornamenti e le fix da scaricare.
  Questa funzione di mirroring sarebbe completamente automatica e semplificherebbe di molto l'attività dell'amministratore ma
  dipende dal supporto di connessione alla rete.</li>
</ol>
<h3>2.2 Controllo dei criteri di aggiornamento comune</h3>
<p>Poiché le funzioni dispongono di un URL del sito di aggiornamenti incluso nel manifest, non sono al corrente
dei siti di aggiornamento locali configurati dagli amministratori. È quindi importante fornire una <b>
funzione di reindirizzamento</b>. Questa ed altre impostazioni dei criteri di aggiornamento possono essere
configurate per un prodotto Eclipse creando un file con i criteri di aggiornamento e configurando la funzione Aggiornamento
ad utilizzare quel file quando effettua la ricerca.</p>
<p>Il file in questione utilizza il formato XML e può avere qualsiasi nome. Il file può essere impostato in <b>
Preferenze&gt;Installazione/Aggiornamento</b><font color="#0000FF"> </font>nel campo <b>Criteri di
aggiornamento</b>. Il campo di testo è vuoto per impostazione
predefinita: gli utenti possono impostare l'URL del file dei criteri di aggiornamento. Il file
è gestito dall'amministratore locale ed è condiviso per tutte le installazioni del
del prodotto. La condivisione può essere ottenuta in due modi:</p>
<ul>
  <li>Se sono gli utenti ad installare il prodotto: agli utenti viene richiesto di aprire la pagina delle preferenze
  ed immettere l'URL fornita.</li>
  <li>Se sono gli amministratori ad installare il prodotto: gli amministratori modificano il file 'plugin_customization.ini'
  nella funzione principale del prodotto ed impostano il valore predefinito della proprietà 'updatePolicyFile'
  come segue:<br>
  <br>
&nbsp;&nbsp;&nbsp; <code>org.eclipse.update.core/updatePolicyFile = &lt;valore dell'URL&gt;<br>
  </code><font color="#0000FF"></font><br>
  <br>
  Questa operazione imposterà il file come valore predefinito per tutte le installazioni.</li>
</ul>
<p>Il file dei criteri deve essere conforme al seguente DTD:</p>
<blockquote>
  <p><tt>&lt;?xml encoding=&quot;ISO-8859-1&quot;?&gt;</tt>
  <p><tt>&lt;!ELEMENT update-policy (url-map)*&gt;</tt><br>
  <tt>&lt;!ATTLIST update-policy</tt><br>
  <tt>&gt;</tt></p>
  <p><tt>&lt;!ELEMENT url-map EMPTY&gt;<br>
  &lt;!ATTLIST url-map<br>
  &nbsp;&nbsp;&nbsp; pattern&nbsp;&nbsp;&nbsp; CDATA #REQUIRED<br>
  &nbsp;&nbsp;&nbsp; url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
CDATA #REQUIRED<br>
  &gt;</tt></p>
</blockquote>
<h4>url-map</h4>
<ul>
  <li><b>pattern</b> - una stringa che rappresenta il prefisso di un ID di funzione (fino ad
    includere un ID completo). Il valore "*" corrisponde a tutte le funzioni.</li>
  <li><b>url</b> - l'URL del sito di aggiornamenti alternativo da usare se l'ID funzione
    inizia con il modello specificato. Se la stringa è vuota, le funzioni che corrispondono al
    modello non potranno essere aggiornate.</li>
</ul>
<p>Questo elemento viene utilizzato per sostituire gli URL di aggiornamento inclusi nei manifest delle funzioni. Quando si
cercano nuovi aggiornamenti, la ricerca Eclipse verificherà i criteri di aggiornamento (se presenti)
e controllerà se è specificato <b>url-map</b> per il prefisso corrispondente della
funzione. Se viene trovata una corrispondenza, verrà utilizzato l'URL associato <b> invece</b> di quello
incluso nel manifest. In questo modo gli amministratori possono configurare i prodotti Eclipse alla ricerca di
aggiornamenti nel server locale dietro il firewall. Le funzioni di terze parti installate dalla funzione Aggiornamento
di Eclipse continueranno ad essere aggiornate con il meccanismo predefinito perché
non troveranno corrispondenze nei criteri.</p>
<p>Possono esistere diversi elementi <b>url-map</b> nel file. I prefissi delle funzioni possono essere
più o meno specifici. Ad esempio, per reindirizzare tutti gli aggiornamenti Eclipse,
l'attributo del modello sarebbe <code>&quot;org.eclipse&quot;</code>. Allo stesso modo, è possibile
utilizzare come modello un ID funzione completo se viene richiesto un reindirizzamento di specifico
per funzione.</p>
<p>I modelli nel file possono essere scelti per restringere progressivamente le potenziali
corrispondenze. Ciò può risultare in più corrispondenze per una specifica funzione. In tal caso,
verrà utilizzata la <b>corrispondenza con il modello più lungo</b>. Ad esempio:</p>
<blockquote>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;update-policy&gt;
	&lt;url-map pattern=&quot;org.eclipse&quot; url=&quot;URL1&quot;/&gt;
	&lt;url-map pattern=&quot;org.eclipse.jdt&quot; url=&quot;URL2&quot;/&gt;
&lt;/update-policy&gt;</pre>
</blockquote>
<p>In questo caso, tutte le funzioni Eclipse verranno aggiornate da URL1, tranne <code>org.eclipse.jdt</code> che utilizzerà URL2.</p>
<p>I file dei criteri di aggiornamento non contengono stringhe traducibili e quindi non richiedono una gestione NL
particolare. In generale, i file devono utilizzare la codifica UTF-8.</p>
<h3>2.3 Rilevazione automatica degli aggiornamenti</h3>
<p>Un terzo della soluzione totale viene trattato in un altro
<a href="tasks-37a.htm">argomento</a> ma viene citata qui perché è parte integrante della
soluzione. <a href="tasks-37a.htm">Aggiornamenti automatici</a> consentirà ad Eclipse di effettuare le ricerche di
aggiornamenti secondo una specifica pianificazione (ad ogni avvio (l'impostazione predefinita), una volta al giorno, una volta
a settimana ecc.). </p>
<h2>3. Riepilogo </h2>
<p>Questa sequenza di operazioni riassume la soluzione:</p>
<ol>
  <li>L'amministratore destina un server sulla LAN aziendale ad ospitare gli aggiornamenti locali
  del prodotto. Inizialmente non contiene siti di aggiornamento. Il computer deve disporre di un
    server HTTP.</li>
  <li>Su quel server l'amministratore configura un file di criteri di aggiornamento ed informa tutti gli
  utenti di impostare nella preferenza dei criteri di aggiornamento l'URL fornito.</li>
  <li>Quando il fornitore del prodotto rende disponibili degli aggiornamenti e delle fix sui siti di aggiornamento,
    l'amministratore scarica sul server locale gli aggiornamenti supportati.</li>
  <li>L'aggiornamento automatico, eseguito alla frequenza pianificata, quando il prodotto del client è attivo,
  rileva gli aggiornamenti ed avverte l'utente.</li>
  <li>L'utente sceglie se installare gli aggiornamenti rilevati.</li>
</ol>

<br>
<p><img src="cpy_ibm.gif"></p>
<p></p>

</p>
</BODY>
</HTML>
